#!/usr/bin/perl

use JSON;
use JSON::XS;
use Data::Dumper;
use Encode;
use utf8::all;
use DBI;
use CGI;
use CGI::Carp 'fatalsToBrowser';
use URI::Escape;
use Search::Elasticsearch;

use Time::HiRes;
chdir("/pwxdata/poe/shops/bin");
require("/pwxdata/poe/shops/bin/subs/all.subroutines.pl");
require("/pwxdata/poe/shops/bin/subs/sub.formatJSON.pl");

if (@ARGV) {

  print "[DEBUG] Enter Item Text (Empty Line to Exit):\n";
  while (<STDIN>) {
    last if (/^\n$/);
    $itemData .= $_;
  }
  $debug = 1;
} else {
  use CGI;
  $query=new CGI;

  $league = $query->param("league");
  $showDays = $query->param("showDays");
  $debug = $query->param("pwxdebug");
  $itemData = $query->param("itemData");
  $version = $query->param("v");
  $interactiveSearch = $query->param("interactiveSearch");

  $itemData =~ s/\r\n/\n/g;
  $itemData =~ s/^\s+//g;


}

#$debug = 1;

$t0 = [Time::HiRes::gettimeofday];

print "Content-type: text/text\n\n";

if ($version < 5.1) {
  print "An updated version of this macro is available\n";
  print "with better uri encoding support which allows\n";
  print "processing of rare and other items:\n\n";
  print "http://exiletools.com\n";
  exit;
}

if ($interactiveSearch) {
  print "Sorry! Interactive searches have not been\n";
  print "fully implemented in this version. This will\n";
  print "happen in the near future and the prompts and\n";
  print "dialogues will update automatically with all\n";
  print "supported search types.\n\n";
  print "You performed an interactive search for:\n\n";
  print "$interactiveSearch\n";
  exit;
}

# Maintenance Notification



$league =~ tr/\/ \-a-zA-Z0-9//dc;
$shortOutput = 1 if ($shortOutput);

$league = lc($league);

#$dbhladder = DBI->connect("dbi:mysql:ladder","pwx","This is pwx web.") || die "DBI Connection Error: $DBI::errstr\n";
#my $apileaguename = $dbhladder->selectrow_array("select `itemjsonName` from `league-list` where `league`=\"$league\");
#if ($apileaguename) {
#  $league = $apileaguename;
#}
#$dbhladder->disconnect;


$showDays = 7 unless ($showDays);

# Fix mjolner and maelstrom
$itemData =~ s/Mj(.*?)lner/Mjolner/g;
$itemData =~ s/Maelst(.*?)m/Maelstrom/g;

# Fix set idiocy
$itemData =~ s/<<set:(\S+?)>>//g;

print "$itemData\n" if ($debug);



#$dbh = DBI->connect("dbi:mysql:full","pwx","This is pwx web.") || die "DBI Connection Error: $DBI::errstr\n";
#$dbh->{Profile} = 2;

&ProcessItem("$itemData");

if ($debug) {
  print "DEBUG DATA:\n======================================\n";
#  print $dbh->{Profile}->format;
  print "\n\n\n";
  $endelapsed = Time::HiRes::tv_interval ( $t0, [Time::HiRes::gettimeofday]);
  print "Processing Time: $endelapsed\n\n";
  print "\n========================================\n\n\n";
}

# End of script, exit just in case
#$dbh->disconnect if ($dbh);
exit;
# === Subroutines =========================================================

sub ProcessItem {
  local @itemData = split(/\n/, $_[0]);
  local @itemChunks = split(/--------\n/, $_[0]);

  local %i;
  $i{League} = $league{$league};
  $i{League} = "Standard" unless ($i{League});
  my $itemData = join("\n", @itemData);

  $i{itemType} = "Card" if (($itemData =~ /Stack Size/) && ($itemData =~ /Rarity: Normal/));
  $i{itemType} = "Currency" if ($itemData =~ /Rarity: Currency/);
  $i{itemType} = "Gem" if ($itemData =~ /Rarity: Gem/);
  $i{itemType} = "Jewel" if ($itemData =~ /Place into an allocated Jewel Socket/);
  $i{itemType} = "Map" if ($itemData =~ /Travel to this Map by using it/);
  $i{itemType} = "Flask" if ($itemData =~ /Right click to drink/);
  $i{itemType} = "Vaal Fragment" if ($itemData =~ /Can be used in the Eternal Laboratory or a personal Map Device/);

  my @namedata = split(/\n/, $itemChunks[0]);
  $i{Name} = "$namedata[1] $namedata[2]";
  $i{Name} =~ s/\s+$//g;
  $i{Name} =~ s/^Superior //g;

  $i{itemType} = &identifyBaseItemTypeFromName("$i{Name}") unless ($i{itemType});


  my $active;
  my $linecount;
  my $chunkcount = 1;
  local %modsTotal;
  local %modsPseudo;
  my @ignoredmods;
  foreach $line (@itemData) {
    $linecount++;
    if ($line =~ /^----/) {
      $chunkcount++;
      undef ($active) unless ($active eq "ilvl");
    }
    print "$linecount ($chunkcount) [$active] : $line\n" if ($debug);

    if (($chunkcount == 1) && ($line =~ /Rarity: (\S+)/)) {
      $i{Rarity} = $1;
    } elsif (($chunkcount == 2) && ($i{itemType} eq "Gem") && ($line =~ /^Level: (\d+)/)) {
      $i{GemLevel} = $1;
    } elsif (($chunkcount == 2) && ($line =~ /^Quality:.*?(\d+)/)) {
      $i{Quality} = $1;
    } elsif (($chunkcount == 2) && ($line =~ /Physical Damage: (\d+)-(\d+)/)) {
      $physmin = $1;
      $physmax = $2;
    } elsif (($chunkcount == 2) && ($line =~ /Attacks per Second: (\d+(.?\d+))/)) {
      $aps = $1;
    } elsif (($chunkcount == 2) && ($line =~ /Critical Strike Chance: (\S+?)\%/)) {
      $crit = $1;
    } elsif ($line =~ /One Handed/) {
      $onehanded = 1;
    } elsif ($line =~ /Two Handed/) {
      $twohanded = 1;
    } elsif ($line =~ /Item Level: (\d+)/) {
      $i{ItemLevel} = $1;
      $active = "ilvl";
    } elsif ($line =~ /Map Level: (\d+)/) {
      $i{MapLevel} = $1;
    } elsif ($line =~ /Requirements:/) {
      $active = "Requirements";
    } elsif ($line =~ /Stack Size: (\d+)\/(\d+)/) {
      $i{StackSize} = "$1/$2";
    } elsif ($line =~ /Sockets: (.*?)$/) {
      $i{Sockets} = $1;
    }

    if ($active eq "Requirements") {
      if ($line =~ /^(.*?): (.*?)$/) {
        $i{Requirements}{$1} = $2;
      }
    }

    if ($active eq "ilvl") {
      next if ($line =~ /Item Level/);
      next if ($line =~ /-----/);
      # This part is mods. Let's see what's up.
      if ($line =~ /^(\+|\-)?(\d+)(\%?)\s+(.*)$/) {
        my $modname = $4;
        my $value = $2;
        unless (&setPseudoMods("$1", "$modname", "$value")) {
          $modsTotal{"$1#$3 $modname"} += $value;
        }
      } elsif ($line =~ /^(.*?) (\+?\d+(\.\d+)?(-\d+(\.\d+)?)?%?)\s?(.*)$/) {
        my $modname;
        my $value = $2;
        my $prefix = $1;
        my $suffix = $6;
        if ($value =~ /\%/) {
          $modname = "$prefix #% $suffix";
          $value =~ s/\%//g;
        } elsif ($value =~ /\d+-\d+/) {
          $modname = "$prefix #-# $suffix";
        } else {
          $modname = "$prefix # $suffix";
        }
        $modname =~ s/\s+$//g;
        if ($value =~ /(\d+)-(\d+)/) {
          $modsTotal{"$modname"}{min} += $1;
          $modsTotal{"$modname"}{max} += $2;
        } else {
          $modsTotal{"$modname"} += $value;
        }
      } else {
        unless ($line =~ /Place into/) {
          push @ignoredmods, $line;
        }
      }
    }
  }

  print "[League: $i{League}]\n\n";
  if (($i{Rarity} eq "Unique") || ($i{Rarity} eq "Gem") || ($i{itemType} eq "Vaal Fragment")) {
    print "$i{Name}\n";
    if ($i{GemLevel}) {
      if ($i{Quality}) {
        print " (Level $i{GemLevel}+, Quality $i{Quality}+)\n";
      } else {
        print " (Level $i{GemLevel}+)\n";
      }
    } else {
      print " ($i{itemType}, $i{Rarity})\n";
    }
    if ($debug) {
      print Dumper(%i);
    }
    &elasticSearchItem();
  } elsif ($i{itemType} eq "Map") {
    print "**Note: As of 2015/12/11, checking for map items is not fully functional pending new updates.\n\n";
    print "Any Level $i{MapLevel} Map\n";
    &elasticSearchItem();
  } elsif ($i{itemType} eq "Card") {
    print "$i{Name}\n";
    print "  (Divination Card)\n";
    &elasticSearchItem();
  # Is this a weapon and should we search by PDPS?
  } elsif (($modsTotal{"#% increased Physical Damage"}) && ($modsTotal{"Adds #-# Physical Damage"})) {
    $i{PDPS} = int(($physmin + $physmax) / 2 * $aps);
    print "**Note: As of 2015/12/11, checking for rare items is not fully functional pending new updates.\n\n";
    print "This item has multiple physical damage mods ($i{PDPS} PDPS).\n";
    print "A simplified PDPS \"smart search\" will be performed.\n\n";
    print "Checking for any $i{Rarity} $i{itemType} with the following mods:\n\n";

    if ($onehanded) {
      print "  Equip Type: One Handed Melee Weapon\n";
      $i{equipType} = "One Handed Melee Weapon";
    } elsif ($twohanded) {
      print "  Equip Type: Two Handed Melee Weapon\n";
      $i{equipType} = "Two Handed Melee Weapon";
    }
    

    print "  Physical DPS: ".int($i{PDPS} * .95)."-".int($i{PDPS} * 1.05)."\n";
    $i{Crit} = $crit;
    print "  Critical Strike Chance: ".($i{Crit} * .9)."-".($i{Crit} * 1.1)."%\n";
    &elasticSearchItem();
  } else {
    print "**Note: As of 2015/12/11, checking for rare items is not fully functional pending new updates.\n\n";
    print "Checking for any $i{Rarity} $i{itemType} with the following mods:\n\n";
    foreach $key (sort(keys(%modsTotal))) {
      if ($modsTotal{$key}{min}) {
        print "  $key: ".($modsTotal{$key}{min} - int($modsTotal{$key}{min} * .2))." - ".($modsTotal{$key}{max} + int($modsTotal{$key}{max} * .2))."\n";
      } else {
        print "  $key: ".($modsTotal{$key} - int($modsTotal{$key} * .2))." - ".($modsTotal{$key} + int($modsTotal{$key} * .2))."\n";
      }
    }
    foreach $key (sort(keys(%modsPseudo))) {
     print "  $key: ".($modsPseudo{$key} - int($modsPseudo{$key} * .2))." - ".($modsPseudo{$key} + int($modsPseudo{$key} * .2))."\n";
    }
    if (@ignoredmods) {
      print "\nIgnoring the following mods:\n\n";
      foreach $line (@ignoredmods) {
        print "$line\n";
      }
      print "\n--------------------\n";
    }
    local $modsearch = 1;
    &elasticSearchItem();
#  } else {
#    print "$i{Rarity} ($i{itemType}) items are not yet supported for this search.\n";
#    if ($debug) {
#      print Dumper(%i);
#      print Dumper(%modsTotal);
#      print Dumper(%modsPseudo);
#    }
  }

}  

# ======== subroutines ==============

sub setSearchBaseHash {
  my %search;

  $search{index} = 'poe';
  $search{type} = 'item';
  $search{"search_type"} = 'count';
  $search{body}{query}{filtered}{filter}{bool}{must}[0]{range}{"shop.chaosEquiv"}{gt} = "0";
  $search{body}{query}{filtered}{filter}{bool}{must}[1]{term}{"attributes.league"} = "$i{League}";
  my $timestamp = time();
  my $searchUpdatedAfter = ($timestamp - ($showDays * 86400)) * 1000;
  $search{body}{query}{filtered}{filter}{bool}{must}[2]{range}{"shop.updated"}{gt} = "$searchUpdatedAfter";

  if (($i{MapLevel}) && ($i{Rarity} ne "Unique")) {
    $search{body}{query}{filtered}{filter}{bool}{must}[3]{range}{"properties.Map.Map Level"}{gte} = "$i{MapLevel}";
  } elsif ($i{PDPS}) {
    $search{body}{query}{filtered}{filter}{bool}{must}[3]{term}{"attributes.itemType"} = "$i{itemType}";
    $search{body}{query}{filtered}{filter}{bool}{must}[4]{term}{"attributes.rarity"} = "$i{Rarity}";
    $search{body}{query}{filtered}{filter}{bool}{must}[5]{range}{"properties.Weapon.Physical DPS"}{lte} = $i{PDPS} * 1.05;
    $search{body}{query}{filtered}{filter}{bool}{must}[6]{range}{"properties.Weapon.Physical DPS"}{gte} = $i{PDPS} * .95;
    $search{body}{query}{filtered}{filter}{bool}{must}[7]{range}{"properties.Weapon.Critical Strike Chance"}{lte} = $i{Crit} * 1.1;
    $search{body}{query}{filtered}{filter}{bool}{must}[8]{range}{"properties.Weapon.Critical Strike Chance"}{gte} = $i{Crit} * .9;
    if ($i{equipType}) {
      $search{body}{query}{filtered}{filter}{bool}{must}[9]{term}{"attributes.equipType"} = "$i{equipType}";
    }


  } elsif ($modsearch) {
    # Add some mod search information
    $search{body}{query}{filtered}{filter}{bool}{must}[3]{term}{"attributes.itemType"} = "$i{itemType}";
    $search{body}{query}{filtered}{filter}{bool}{must}[4]{term}{"attributes.rarity"} = "$i{Rarity}";
    my $modcount = 5;
    foreach $mod (keys(%modsTotal)) {
      if ($modsTotal{"$mod"}{min}) {
        $search{body}{query}{filtered}{filter}{bool}{must}[$modcount]{range}{"modsTotal.$mod.min"}{gte} = ($modsTotal{$mod}{min} - int($modsTotal{$mod}{min} * .2));
        $modcount++;
        $search{body}{query}{filtered}{filter}{bool}{must}[$modcount]{range}{"modsTotal.$mod.max"}{lte} = ($modsTotal{$mod}{max} + int($modsTotal{$mod}{max} * .2));
        $modcount++;
      } else {
        $search{body}{query}{filtered}{filter}{bool}{must}[$modcount]{range}{"modsTotal.$mod"}{gte} = ($modsTotal{$mod} - int($modsTotal{$mod} * .2));
        $modcount++;
        $search{body}{query}{filtered}{filter}{bool}{must}[$modcount]{range}{"modsTotal.$mod"}{lte} = ($modsTotal{$mod} + int($modsTotal{$mod} * .2));
        $modcount++;
      }
    }
    foreach $mod (keys(%modsPseudo)) {
      $search{body}{query}{filtered}{filter}{bool}{must}[$modcount]{range}{"modsPseudo.$mod"}{gte} = ($modsPseudo{$mod} - int($modsPseudo{$mod} * .2));
      $modcount++;
      $search{body}{query}{filtered}{filter}{bool}{must}[$modcount]{range}{"modsPseudo.$mod"}{lte} = ($modsPseudo{$mod} + int($modsPseudo{$mod} * .2));
      $modcount++;
    }
  } elsif ($i{itemType} eq "Card") {
    # Card specific base
    $search{body}{query}{filtered}{filter}{bool}{must}[3]{term}{"attributes.baseItemType"} = "Card";
    $search{body}{query}{filtered}{filter}{bool}{must}[4]{term}{"info.fullName"} = "$i{Name}";
  } elsif ($i{GemLevel}) {
    $search{body}{query}{filtered}{filter}{bool}{must}[3]{term}{"attributes.rarity"} = "$i{Rarity}";
    $search{body}{query}{filtered}{filter}{bool}{must}[4]{term}{"info.fullName"} = "$i{Name}";
    $search{body}{query}{filtered}{filter}{bool}{must}[5]{range}{"properties.Gem.Level"}{gte} = "$i{GemLevel}";
    if ($i{Quality}) {
      $search{body}{query}{filtered}{filter}{bool}{must}[6]{range}{"properties.Gem.Quality"}{gte} = "$i{Quality}";
    }
  } else {
    $search{body}{query}{filtered}{filter}{bool}{must}[3]{term}{"attributes.rarity"} = "$i{Rarity}";
    $search{body}{query}{filtered}{filter}{bool}{must}[4]{term}{"info.fullName"} = "$i{Name}";
  }

  return(%search);
}

sub getLeagueItemCount {
  my %search;
  $search{index} = 'poe';
  $search{type} = 'item';
  $search{"search_type"} = 'count';
  $search{body}{query}{filtered}{filter}{bool}{must}[1]{range}{"shop.chaosEquiv"}{gt} = "0";
  $search{body}{query}{filtered}{filter}{bool}{must}[2]{term}{"attributes.league"} = "$i{League}";
  $search{body}{query}{filtered}{filter}{bool}{should}[0]{term}{"shop.verified"} = "YES";
  $search{body}{query}{filtered}{filter}{bool}{should}[1]{term}{"shop.verified"} = "GONE";

  my $timestamp = time();
  my $searchUpdatedAfter = ($timestamp - ($showDays * 86400)) * 1000;
  $search{body}{query}{filtered}{filter}{bool}{must}[4]{range}{"shop.updated"}{gt} = "$searchUpdatedAfter";

  my $results = $e->search(%search);
  return($results->{hits}->{total});
}

sub elasticSearchItem {
  &connectElasticSearch;

  my $timestamp = time();
  my $searchAddedAfter = ($timestamp - (2 * 86400)) * 1000;

  # Test search, for debug
  if ($debug) {
    print "-- Search: ----------------------------\n";
    %search = &setSearchBaseHash();
    print Dumper(%search);
    print "-- Results: ---------------------------\n";
    my $results = $e->search(%search);
    print Dumper($results);
  }

  # Get total number of items available and percentiles
  %search = &setSearchBaseHash();
  my $lmc = @{$search{body}{query}{filtered}{filter}{bool}{must}} + 1;
  $search{body}{query}{filtered}{filter}{bool}{must}[$lmc]{term}{"shop.verified"} = "YES";

  $search{body}{aggs}{"chaosEquiv_stats"}{stats}{field} = "shop.chaosEquiv";
  $search{body}{aggs}{"chaosEquiv_percentiles"}{percentiles}{field} = "shop.chaosEquiv";
  $search{body}{aggs}{"chaosEquiv_percentiles"}{percentiles}{percents}[0] = "10";
  my $results = $e->search(%search);
#  my $json = JSON->new->utf8;
#  my $json = $json->pretty->encode($results);
#  print "$json\n";

  unless ($results->{aggregations}->{"chaosEquiv_stats"}->{count}) {
    my $leagueItemCount = &getLeagueItemCount;
    print "\nSorry! 0 out of $leagueItemCount verified items with prices\n";
    print "updated in the last $showDays days were similar to this item!\n\n";
#    print Dumper(%search);
    return;
  }

  my $value = $results->{aggregations}->{"chaosEquiv_percentiles"}->{values}->{"10.0"};
  my $nicevalue = &niceCEV($results->{aggregations}->{"chaosEquiv_percentiles"}->{values}->{"10.0"});
  my $totalcount = $results->{aggregations}->{"chaosEquiv_stats"}->{count};
  my $min = &niceCEV($results->{aggregations}->{"chaosEquiv_stats"}->{min});
  my $max = &niceCEV($results->{aggregations}->{"chaosEquiv_stats"}->{max});

  # Find out how many exactly were available under that percentile

  %search = &setSearchBaseHash();
  my $lmc = @{$search{body}{query}{filtered}{filter}{bool}{must}} + 1;
  $search{body}{query}{filtered}{filter}{bool}{must}[$lmc]{term}{"shop.verified"} = "YES";
  my $lmc = @{$search{body}{query}{filtered}{filter}{bool}{must}} + 1;
  $search{body}{query}{filtered}{filter}{bool}{must}[$lmc]{range}{"shop.chaosEquiv"}{lte} = $value;

  my $results = $e->search(%search);
  my $totalatvalue = $results->{hits}->{total};


  # Repeat for GONE

  %search = &setSearchBaseHash();
  my $lmc = @{$search{body}{query}{filtered}{filter}{bool}{must}} + 1;
  $search{body}{query}{filtered}{filter}{bool}{must}[$lmc]{term}{"shop.verified"} = "GONE";

  $search{body}{aggs}{"chaosEquiv_stats"}{stats}{field} = "shop.chaosEquiv";
  $search{body}{aggs}{"chaosEquiv_percentiles"}{percentiles}{field} = "shop.chaosEquiv";
  $search{body}{aggs}{"chaosEquiv_percentiles"}{percentiles}{percents}[0] = "10";
  my $results = $e->search(%search);

  my $gvalue = $results->{aggregations}->{"chaosEquiv_percentiles"}->{values}->{"10.0"};
  my $gnicevalue = &niceCEV($results->{aggregations}->{"chaosEquiv_percentiles"}->{values}->{"10.0"});
  my $gtotalcount = $results->{aggregations}->{"chaosEquiv_stats"}->{count};
  my $gmin = &niceCEV($results->{aggregations}->{"chaosEquiv_stats"}->{min});
  my $gmax = &niceCEV($results->{aggregations}->{"chaosEquiv_stats"}->{max});

  # Find out how many exactly were available under that percentile

  %search = &setSearchBaseHash();
  my $lmc = @{$search{body}{query}{filtered}{filter}{bool}{must}} + 1;
  $search{body}{query}{filtered}{filter}{bool}{must}[$lmc]{term}{"shop.verified"} = "GONE";
  my $lmc = @{$search{body}{query}{filtered}{filter}{bool}{must}} + 1;
  $search{body}{query}{filtered}{filter}{bool}{must}[$lmc]{range}{"shop.chaosEquiv"}{lte} = $gvalue;
  my $lmc = @{$search{body}{query}{filtered}{filter}{bool}{must}} + 1;
  $search{body}{query}{filtered}{filter}{bool}{must}[$lmc]{range}{"shop.modified"}{gt} = "$searchAddedAfter";

  my $results = $e->search(%search);
  my $gtotalatvalue = $results->{hits}->{total};


  # Get some counts

  %search = &setSearchBaseHash();
  my $lmc = @{$search{body}{query}{filtered}{filter}{bool}{must}} + 1;
  $search{body}{query}{filtered}{filter}{bool}{must}[$lmc]{term}{"shop.verified"} = "YES";
  my $lmc = @{$search{body}{query}{filtered}{filter}{bool}{must}} + 1;
  $search{body}{query}{filtered}{filter}{bool}{must}[$lmc]{range}{"shop.added"}{gt} = "$searchAddedAfter";
  my $results = $e->search(%search);
  my $addedcount = $results->{hits}->{total};

  %search = &setSearchBaseHash();
  my $lmc = @{$search{body}{query}{filtered}{filter}{bool}{must}} + 1;
  $search{body}{query}{filtered}{filter}{bool}{must}[$lmc]{term}{"shop.verified"} = "GONE";
  my $lmc = @{$search{body}{query}{filtered}{filter}{bool}{must}} + 1;
  $search{body}{query}{filtered}{filter}{bool}{must}[$lmc]{range}{"shop.modified"}{gt} = "$searchAddedAfter";
  my $results = $e->search(%search);
  my $gonecount = $results->{hits}->{total};



  print "\n";
  print "Available Now: ~$nicevalue (x$totalatvalue)\n";
  if ($gtotalatvalue > 0) {
    print "Recently GONE: ~$gnicevalue (x$gtotalatvalue)\n\n" 
  } else {
    print "\n";
  }

  print "Lowest Price: $min\n\n";

  print "At Any Price:\n";
  print " $totalcount Available\n";
  print " +$addedcount Added Recently\n";
  print " -$gonecount Gone Recently\n";
  print "\n\n";
#  print "(stats for items updated in the last $showDays days)\n";

  if ($i{GemLevel}) {
    if ($i{Quality}) {
      print "^Found $totalatvalue $i{Name} (Level $i{GemLevel}+, Quality $i{Quality}+) available for ~$nicevalue in $i{League}. ($totalcount available with a buyout, +$addedcount added recently, -$gonecount gone recently)\n";
    } else {
      print "^Found $totalatvalue $i{Name} (Level $i{GemLevel}+) available for ~$nicevalue in $i{League}. ($totalcount available with a buyout, +$addedcount added recently, -$gonecount gone recently)\n";
    }
  } elsif (($i{MapLevel}) && ($i{Rarity} ne "Unique")) {
      print "^Found $totalatvalue Level $i{MapLevel} Maps available for ~$nicevalue in $i{League}. ($totalcount available with a buyout, +$addedcount added recently, -$gonecount gone recently)\n";
  } elsif ($modsearch) {
    print "^Found $totalatvalue $i{Rarity} $i{itemType}s similar to $i{Name} available for ~$nicevalue in $i{League}. ($totalcount available with a buyout, +$addedcount added recently, -$gonecount gone recently)\n";
  } elsif ($i{PDPS}) {
    print "^Found $totalatvalue $i{Rarity} $i{itemType} with around $i{PDPS} PDPS and $i{Crit}% Crit Chance available for ~$nicevalue in $i{League}. ($totalcount available with a buyout, +$addedcount added recently, -$gonecount gone recently)\n";
  } else {
    print "^Found $totalatvalue $i{Name} available for ~$nicevalue in $i{League}. ($totalcount available with a buyout, +$addedcount added recently, -$gonecount gone recently)\n";
  }

  unless ($e) {
    print "\nERROR: The Elastic Search index at exiletools.com did\n";
    print "not respond to a connection request. It may be offline.\n\n";
    print "Please try your search again later or check the site\n";
    print "for any notifications: http://exiletools.com\n";
    return;
  }


}

sub connectElasticSearch {
  $e = Search::Elasticsearch->new(
#    cxn_pool => 'Sniff',
    nodes =>  [
#      'pwx.it.prd:9200',
      'pwx2.it.prd:9200'
    ]
  );
}




sub GetPercentile {
  my ($p,$aref) = @_;
  my $percentile = int($p * $#{$aref}/100);
  my $undercount;
  foreach $num (@$aref) {
    $undercount++ if ($num <= (@$aref)[$percentile]);
  }

  return (@$aref)[$percentile], $undercount;
}

sub SetPercentile {
  my $key = $_[0];
  my $percentile = $_[1];
  my @numbers;
  foreach my $num (keys(%{$item{$n}{"$key"}})) {
    for (my $x=1; $x<=$item{$n}{"$key"}{$num}; $x++) {
      next unless $num > 0;
      push @numbers, $num;
    }
  }
  @numbers = sort {$a <=> $b} @numbers;
  ($item{$n}{"$key\_lowest_$percentile\_percentile"}, $item{$n}{"$key\_items_in_lowest_$percentile\_percentile"}) = &GetPercentile($percentile, \@numbers);
}


